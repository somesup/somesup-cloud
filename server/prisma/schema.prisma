generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ArticleProvider {
  id   Int    @id @default(autoincrement())
  name String

  articles Article[]

  @@map("article_provider")
}

model ProcessedArticle {
  id               Int      @id @default(autoincrement())
  title            String
  one_line_summary String   @db.Text
  full_summary     String   @db.Text
  language         String   @db.VarChar(30)
  region           String?  @db.VarChar(30)
  section          String?  @db.VarChar(30)
  created_at       DateTime @default(now())

  articles Article[]
  keywords KeywordArticleMapping[]
  likes    Like[]
  scraps   Scrap[]

  @@map("processed_article")
}

model Article {
  id            Int      @id @default(autoincrement())
  provider_id   Int
  processed_id  Int?
  title         String
  content       String   @db.Text
  language      String   @db.VarChar(30)
  region        String?  @db.VarChar(30)
  section       String?  @db.VarChar(30)
  thumbnail_url String
  news_url      String
  is_processed  Boolean  @default(false)
  created_at    DateTime @default(now())

  provider  ArticleProvider   @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  processed ProcessedArticle? @relation(fields: [processed_id], references: [id], onDelete: SetNull)

  @@map("article")
}

model Keyword {
  id      Int    @id @default(autoincrement())
  keyword String @unique

  articles KeywordArticleMapping[]

  @@map("keyword")
}

model KeywordArticleMapping {
  p_article_id Int
  keyword_id   Int

  processed_article ProcessedArticle @relation(fields: [p_article_id], references: [id], onDelete: Cascade)
  keyword           Keyword          @relation(fields: [keyword_id], references: [id], onDelete: Cascade)

  @@id([p_article_id, keyword_id])
  @@map("keyword_article_mapping")
}

model User {
  id               Int      @id @default(autoincrement())
  nickname         String   @unique
  phone            String   @unique
  is_authenticated Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt

  refreshTokens RefreshToken?
  likes         Like[]
  scraps        Scrap[]

  @@map("user")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique
  token      String
  expires_at DateTime
  created_at DateTime  @default(now())
  revoked_at DateTime?
  is_revoked Boolean   @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("refresh_token")
}

model Like {
  p_article_id Int
  user_id      Int
  liked_at     DateTime @default(now())

  processed_article ProcessedArticle @relation(fields: [p_article_id], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([p_article_id, user_id])
  @@map("like")
}

model Scrap {
  p_article_id Int
  user_id      Int
  scrapped_at  DateTime @default(now())

  processed_article ProcessedArticle @relation(fields: [p_article_id], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([p_article_id, user_id])
  @@map("scrap")
}
